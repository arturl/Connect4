@page "/connect4"
@rendermode InteractiveServer

<PageTitle>Connect4</PageTitle>

<h1>Connect4</h1>

<style>
    table,
    td,
    th {
        border: 3px solid #777;
    }

    th {
        background-color: #04AA6D;
    }

    table {
        text-align: center;
    }
</style>

<table class="table">

    <thead>
        <tr>
            <th>0</th>
            <th>1</th>
            <th>2</th>
            <th>3</th>
            <th>4</th>
            <th>5</th>
            <th>6</th>
        </tr>
        <tr>
            <td><button disabled=@(placeButtonsDisabled) class="btn btn-primary" @onclick="Button0">Drop disk here</button></td>
            <td><button disabled=@(placeButtonsDisabled) class="btn btn-primary" @onclick="Button1">Drop disk here</button></td>
            <td><button disabled=@(placeButtonsDisabled) class="btn btn-primary" @onclick="Button2">Drop disk here</button></td>
            <td><button disabled=@(placeButtonsDisabled) class="btn btn-primary" @onclick="Button3">Drop disk here</button></td>
            <td><button disabled=@(placeButtonsDisabled) class="btn btn-primary" @onclick="Button4">Drop disk here</button></td>
            <td><button disabled=@(placeButtonsDisabled) class="btn btn-primary" @onclick="Button5">Drop disk here</button></td>
            <td><button disabled=@(placeButtonsDisabled) class="btn btn-primary" @onclick="Button6">Drop disk here</button></td>
        </tr>
    </thead>
    <tbody>
        @foreach (var row in data)
        {
            <tr>
                <td><img src=@row[0]></td>
                <td><img src=@row[1]></td>
                <td><img src=@row[2]></td>
                <td><img src=@row[3]></td>
                <td><img src=@row[4]></td>
                <td><img src=@row[5]></td>
                <td><img src=@row[6]></td>
            </tr>
        }
    </tbody>
</table>

<h2>@GameStatus</h2>
<h3>@GameHistory</h3>

<table>
    <thead>
        <tr>
            <td>
                <EditForm EditContext="editContext" OnSubmit="Submit" FormName="Starship4">
                    <DataAnnotationsValidator />
                    <div>
                        <button class="btn btn-primary">Start new game</button>
                        <label>
                            Difficulty level:
                            <InputNumber @bind-Value="Model!.Level" min="0" max="20" />
                        </label>
                    </div>
                </EditForm>
            </td>
            <td>
                <button disabled=@(undoButtonDisabled) class="btn btn-primary" @onclick="ButtonUndo">Undo last move</button>
            </td>
        </tr>
    </thead>
</table>

@code {

    struct MoveEntry
    {
        public Connect4AIEngine.Disk Player;
        public int Move;
    }

    private int Level = 7;

    private string GameStatus = "Ready to start a new game!";
    private string GameHistory = "😊";
    private bool placeButtonsDisabled = true;
    private bool undoButtonDisabled = true;

    private Task Button0() => PressButton(0);
    private Task Button1() => PressButton(1);
    private Task Button2() => PressButton(2);
    private Task Button3() => PressButton(3);
    private Task Button4() => PressButton(4);
    private Task Button5() => PressButton(5);
    private Task Button6() => PressButton(6);

    private Stack<MoveEntry> moves = new Stack<MoveEntry>();

    private Connect4AIEngine.Board board = null;
    Connect4AIEngine.Disk nextToPlay = Connect4AIEngine.Disk.Blue;

    private async Task Submit()
    {
        if (editContext != null && editContext.Validate())
        {
            if (editContext.Model is StartGameForm form)
            {
                this.Level = form.Level;
            }
            this.GameStatus = "New game started. You play blue, AI plays red. Make your move!";
            this.GameHistory = "";
            moves.Clear();
            board = new Connect4AIEngine.Board();
            nextToPlay = Connect4AIEngine.Disk.Blue;
            UpdateBoard();
            placeButtonsDisabled = false;
            undoButtonDisabled = true;
        }
        else
        {
            this.GameStatus = "Level incorrect, new game not started";
            if (editContext.Model is StartGameForm form)
            {
                form.Level = this.Level;
            }
        }

        string hostName = System.Net.Dns.GetHostName(); // Retrive the Name of HOST
        string myIP = System.Net.Dns.GetHostByName(hostName).AddressList[0].ToString();

        this.GameStatus = $"hostname={hostName}, IP={myIP}.";
    }

    private void ButtonUndo()
    {
        if(moves.Any())
        {
            var lastMove = moves.Pop();
            placeButtonsDisabled = false;

            if(lastMove.Player == Connect4AIEngine.Disk.Red && moves.Any())
            {
                lastMove = moves.Pop();
            }

            nextToPlay = Connect4AIEngine.Disk.Blue;
            board = new Connect4AIEngine.Board();
            foreach(var entry in moves.Reverse())
            {
                board.DropDiskAt(entry.Player, entry.Move);
            }
            GameStatus = $"You took back your move {lastMove.Move}.";
            UpdateBoard();
        }

        if(!moves.Any())
        {
            undoButtonDisabled = true;
        }
    }

    private async Task PressButton(int move)
    {
        await Task.CompletedTask;

        var availableMoves = board.GetAvailableMovesForPlayer();
        if (!availableMoves.Contains(move))
        {
            GameStatus = $"Choice {move} is incorrect, try again";
        }
        else
        {
            placeButtonsDisabled = true;
            undoButtonDisabled = false;

            moves.Push(new MoveEntry{Player = nextToPlay, Move = move});

            board.DropDiskAt(nextToPlay, move);
            UpdateBoard();

            Connect4AIEngine.Disk winner = Connect4AIEngine.Disk.Empty;
            string direction = string.Empty;
            bool isWinReached = board.IsWinReached(ref winner, ref direction);

            if (isWinReached)
            {
                if(winner == nextToPlay)
                {
                    GameStatus = $"Congratulations, you won the game. Winning direction: {direction}";
                }
                else
                {
                    GameStatus = $"Error 1001";
                }
            }
            else
            {
                nextToPlay = (nextToPlay == Connect4AIEngine.Disk.Red) ? Connect4AIEngine.Disk.Blue : Connect4AIEngine.Disk.Red;
                this.GameStatus = "Analyzing...";

                // Delay to redraw
                await Task.Delay(500);

                if (!board.GetAvailableMovesForPlayer().Any())
                {
                    this.GameStatus = "Game over - no more moves";
                }
                else
                {
                    var evalResultWithTimer = Connect4AIEngine.GameEngine.NegaMax(board, nextToPlay, this.Level);
                    move = evalResultWithTimer.evalResult.Move;

                    GameStatus = $"AI chose {evalResultWithTimer.evalResult.Move}. ";

                    if(evalResultWithTimer.forcedMove)
                    {
                        GameStatus += "Forced move.";
                    }
                    else
                    {
                        GameStatus += $"Score = {evalResultWithTimer.evalResult.Score}. Elapsed time = {(int)evalResultWithTimer.elapsedTime.TotalMilliseconds} ms. ";
                        if (evalResultWithTimer.evalResult.Score == Connect4AIEngine.GameEngine.WinValue)
                        {
                            GameStatus += "AI will win.";
                        }
                        else if (evalResultWithTimer.evalResult.Score == -Connect4AIEngine.GameEngine.WinValue)
                        {
                            GameStatus += "AI might lose if you play right.";
                        }
                    }

                    moves.Push(new MoveEntry { Player = nextToPlay, Move = move });
                    board.DropDiskAt(nextToPlay, move);
                    UpdateBoard();

                    winner = Connect4AIEngine.Disk.Empty;
                    isWinReached = board.IsWinReached(ref winner, ref direction);

                    if (isWinReached)
                    {
                        if (winner == nextToPlay)
                        {
                            GameStatus = $"Game over. AI won the game. Winning direction: {direction}";
                        }
                        else
                        {
                            GameStatus = $"Error 1002";
                        }
                    }
                    else
                    {
                        if (!board.GetAvailableMovesForPlayer().Any())
                        {
                            this.GameStatus = "Game over - no more moves";
                        }
                        else
                        {
                            placeButtonsDisabled = false;
                        }
                    }

                    nextToPlay = (nextToPlay == Connect4AIEngine.Disk.Red) ? Connect4AIEngine.Disk.Blue : Connect4AIEngine.Disk.Red;

                }
            }
        }
    }

    private void UpdateGameHistory()
    {
        GameHistory = "";
        foreach(var entry in moves)
        {
            GameHistory = $"{GameHistory}{Connect4AIEngine.Board.GetDiskColorLetter(entry.Player)}{entry.Move}";
        }
    }

    private void UpdateBoard()
    {
        int irow = 0;
        foreach (var row in data)
        {
            for (int i = 0; i < 7; i++)
            {
                switch (board[i,irow])
                {
                    case Connect4AIEngine.Disk.Blue : row[i] = "blue.jpg"; break;
                    case Connect4AIEngine.Disk.Red: row[i] = "red.jpg"; break;
                    default: row[i] = "empty.jpg"; break;
                }
            }
            irow++;
        }
        UpdateGameHistory();
    }

    private List<string[]> data = new List<String[]> { 
        new string[7],
        new string[7],
        new string[7],
        new string[7],
        new string[7],
        new string[7],
    };

    private EditContext? editContext;

    [SupplyParameterFromForm]
    private StartGameForm? Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model ??=
            new()
                {
                    Level = this.Level,
                };
        editContext = new(Model);

        foreach(var row in data)
        {
            for(int i=0; i<7; i++)
            {
                row[i] = "empty.jpg";
            }
        }
    }
}
